=============
Penney's game
=============

:date: 2015-02-26
:slug: penney-game

Penney's game 是个很简单的问题。可是网络上能找到的答案，要么到状态转移图就完了，要么就跳过中间步骤直接出答案了。

.. more

解这个问题，分析一下状态转移的情况，接着直接计算 :math:`P \cdot \lim_{n \to \infty}{M^n}` 就可以了。其中，P是初始概率 :math:`[1, 0, 0, ..., 0]` 。M 是状态转移矩阵。把终止状态排在最后，可以观察到，终止状态对应的几个横行，左边都是零，最右边是个单位矩阵 :math:`\left[\begin{matrix} A & B \\ O & I \end{matrix}\right]` 。不妨令 :math:`M^n = \left[\begin{matrix} A_n & B_n \\ O & I \end{matrix}\right]` 有

.. math::

    \begin{array}{lcl}
    M^n &=& \left[\begin{matrix} A_n & B_n \\ O & I \end{matrix}\right] \\
        &=& \left[\begin{matrix} A_{n-1} & B_{n-1} \\ O & I \end{matrix}\right] \cdot \left[\begin{matrix} A & B \\ O & I \end{matrix}\right] \\
        &=& \left[\begin{matrix} A_{n-1} \cdot A & A_{n-1} \cdot B + B_{n-1} \\ O & I \end{matrix}\right] \\
        &=& \left[\begin{matrix} A^n & (\sum_{i=0}^{n-1} A^i) \cdot B \\ O & I \end{matrix}\right]
    \end{array}

因为最终都是会进入终止状态的，所以 :math:`\lim_{n \to \infty} A^n = O` ，而 :math:`(I-A) \cdot (\sum_{i=0}^{n-1} A^i) = I - A^n` 。于是， :math:`\lim_{n \to \infty} (I-A) \cdot (\sum_{i=0}^{n-1} A^i) = I` 。因此这就相当于要求出 :math:`(I-A)^{-1}\cdot B` 。

用J语言一行代码就可以了

.. code::

       solve=:];&>{.@:(-@:#@:]([({."0 1%.(=@i.@:#-])@:(}."0 1))}.)+/@:(3 :'({."1 y)(;/}."1 y)}0$~(,])#y'&]"2)@:(2 0 1|:(((,1&-)@:[,"1 2])(i.@:#,:"0 1])@:(((('HT',~&.>"1 0]),[,.[)(1 i:~(]-:({.~-@:#))&>)"0 1,~)([:(([:/:#&>){])'';#}.~.@:(,;@:(<\&.>)))))))
       1r2 solve 'HHT';'HTT'
    ┌───┬───┐
    │HHT│2r3│
    ├───┼───┤
    │HTT│1r3│
    └───┴───┘

假如你阅读上面这行代码有困难，可以看下面的解释

.. code::

       NB. 求一个序列的中间状态
       <\ 'HHT'
    ┌─┬──┬───┐
    │H│HH│HHT│
    └─┴──┴───┘
       NB. 对每个序列分别求中间状态
       <\&.> 'HHT';'HTT'
    ┌──────────┬──────────┐
    │┌─┬──┬───┐│┌─┬──┬───┐│
    ││H│HH│HHT│││H│HT│HTT││
    │└─┴──┴───┘│└─┴──┴───┘│
    └──────────┴──────────┘
       NB. 把结果拼到一起
       ; <\&.> 'HHT';'HTT'
    ┌─┬──┬───┬─┬──┬───┐
    │H│HH│HHT│H│HT│HTT│
    └─┴──┴───┴─┴──┴───┘
       NB. 把终止状态放最前面
       (, ;@:(<\&.>)) 'HHT';'HTT'
    ┌───┬───┬─┬──┬───┬─┬──┬───┐
    │HHT│HTT│H│HH│HHT│H│HT│HTT│
    └───┴───┴─┴──┴───┴─┴──┴───┘
       NB. 去重
       ~. (, ;@:(<\&.>)) 'HHT';'HTT'
    ┌───┬───┬─┬──┬──┐
    │HHT│HTT│H│HH│HT│
    └───┴───┴─┴──┴──┘
       NB. 把最前面的终止状态去掉
       (# }. ~.@:(, ;@:(<\&.>))) 'HHT';'HTT'
    ┌─┬──┬──┐
    │H│HH│HT│
    └─┴──┴──┘
       NB. 再把起始状态补上
       ('' ; # }. ~.@:(, ;@:(<\&.>))) 'HHT';'HTT'
    ┌┬─┬──┬──┐
    ││H│HH│HT│
    └┴─┴──┴──┘
       NB. 按长度排序
       (([:/:#&>){])('' ; # }. ~.@:(, ;@:(<\&.>))) 'HHT';'HTT'
    ┌─┬──┬──┐
    │H│HH│HT│
    └─┴──┴──┘
       NB. 这样就得到了所有非终止状态
       non_terminal =: [: (([:/:#&>){]) ('' ; # }. ~.@:(, ;@:(<\&.>)))
       non_terminal 'HHT';'HTT'
    ┌┬─┬──┬──┐
    ││H│HH│HT│
    └┴─┴──┴──┘
       NB. 在最后加上终止状态就得到了所有状态
       (,~ non_terminal) 'HHT';'HTT'
    ┌┬─┬──┬──┬───┬───┐
    ││H│HH│HT│HHT│HTT│
    └┴─┴──┴──┴───┴───┘
       NB. 抛一次硬币，在中间状态的序列后面加上H和T
       (('HT' ,~&.>"1 0 ]) non_terminal) 'HHT';'HTT'
    ┌───┬───┐
    │H  │T  │
    ├───┼───┤
    │HH │HT │
    ├───┼───┤
    │HHH│HHT│
    ├───┼───┤
    │HTH│HTT│
    └───┴───┘
       NB. 不妨认为终止状态的下一个状态是他本身
       ((('HT' ,~&.>"1 0 ]) , [ ,. [) non_terminal) 'HHT';'HTT'
    ┌───┬───┐
    │H  │T  │
    ├───┼───┤
    │HH │HT │
    ├───┼───┤
    │HHH│HHT│
    ├───┼───┤
    │HTH│HTT│
    ├───┼───┤
    │HHT│HHT│
    ├───┼───┤
    │HTT│HTT│
    └───┴───┘
       NB. 这样就得到了，所有抛一次硬币后的可能序列
       next =: ('HT' ,~&.>"1 0 ]) , [ ,. [
       NB. 排成表格
       ((,~ ,. next) non_terminal) 'HHT';'HTT'
    ┌───┬───┬───┐
    │   │H  │T  │
    ├───┼───┼───┤
    │H  │HH │HT │
    ├───┼───┼───┤
    │HH │HHH│HHT│
    ├───┼───┼───┤
    │HT │HTH│HTT│
    ├───┼───┼───┤
    │HHT│HHT│HHT│
    ├───┼───┼───┤
    │HTT│HTT│HTT│
    └───┴───┴───┘
       NB. 接下来要判断序列是否以某个状态结尾
       'H' -: 'H'
    1
       'H' -: 'HH'
    0
       'HT' -: 'HT'
    1
       _1 {. 'HHHT'
    T
       _2 {. 'HHHT'
    HT
       _3 {. 'HHHT'
    HHT
       -@:# 'HT'
    _2
       'HHHT' ({.~ -@:#) 'HT'
    HT
       'HHHT' (] -: ({.~ -@:#)) 'HT'
    1
       endswith =: ] -: ({.~ -@:#)
       'HHHT' endswith 'HHT'
    1
       'HHHT' endswith 'HHH'
    0
       ((next (endswith & >)"0 1 ,~) non_terminal) 'HHT';'HTT'
    1 1 0 0 0 0
    1 0 0 0 0 0

    1 1 1 0 0 0
    1 0 0 1 0 0

    1 1 1 0 0 0
    1 0 0 1 1 0

    1 1 0 0 0 0
    1 0 0 0 0 1

    1 0 0 1 1 0
    1 0 0 1 1 0

    1 0 0 0 0 1
    1 0 0 0 0 1
       NB. 找出最长的那个状态
       1 i:~"0 1 ((next (endswith & >)"0 1 ,~) non_terminal) 'HHT';'HTT'
    1 0
    2 3
    2 4
    1 5
    4 4
    5 5
       transition =: (1 i:~ endswith&>)"0 1
       ((next (transition { ]) ,~) non_terminal) 'HHT';'HTT'
    ┌───┬───┐
    │H  │   │
    ├───┼───┤
    │HH │HT │
    ├───┼───┤
    │HH │HHT│
    ├───┼───┤
    │H  │HTT│
    ├───┼───┤
    │HHT│HHT│
    ├───┼───┤
    │HTT│HTT│
    └───┴───┘
       ((next (] ,. transition { ]) ,~) non_terminal) 'HHT';'HTT'
    ┌───┬───┬───┐
    │   │H  │   │
    ├───┼───┼───┤
    │H  │HH │HT │
    ├───┼───┼───┤
    │HH │HH │HHT│
    ├───┼───┼───┤
    │HT │H  │HTT│
    ├───┼───┼───┤
    │HHT│HHT│HHT│
    ├───┼───┼───┤
    │HTT│HTT│HTT│
    └───┴───┴───┘
       ((next ((' ';'H';'T') , ] ,. transition { ]) ,~) non_terminal) 'HHT';'HTT'
    ┌───┬───┬───┐
    │   │H  │T  │
    ├───┼───┼───┤
    │   │H  │   │
    ├───┼───┼───┤
    │H  │HH │HT │
    ├───┼───┼───┤
    │HH │HH │HHT│
    ├───┼───┼───┤
    │HT │H  │HTT│
    ├───┼───┼───┤
    │HHT│HHT│HHT│
    ├───┼───┼───┤
    │HTT│HTT│HTT│
    └───┴───┴───┘
       NB. 这样就得到了状态转移表
       table =: (' ';'H';'T') , ] ,. transition { ]
       transition_table =: (next table ,~) non_terminal
       transition_table 'HHT';'HTT'
    ┌───┬───┬───┐
    │   │H  │T  │
    ├───┼───┼───┤
    │   │H  │   │
    ├───┼───┼───┤
    │H  │HH │HT │
    ├───┼───┼───┤
    │HH │HH │HHT│
    ├───┼───┼───┤
    │HT │H  │HTT│
    ├───┼───┼───┤
    │HHT│HHT│HHT│
    ├───┼───┼───┤
    │HTT│HTT│HTT│
    └───┴───┴───┘

       NB. 接下来从状态转移表计算出状态转移矩阵
       0.2 (2 0 1 |: (((,1&-)@:[,"1 2])(i.@:#,:"0 1])@:((next transition,~)non_terminal))) 'HHT';'HTT'
    0.2 0 1
    0.2 1 2
    0.2 2 2
    0.2 3 1
    0.2 4 4
    0.2 5 5

    0.8 0 0
    0.8 1 3
    0.8 2 4
    0.8 3 5
    0.8 4 4
    0.8 5 5

       mat =: 3 : '({."1 y) (;/ }."1 y) } 0 $~ (],]) # y'
       matrix =: +/@:(mat&]"2)@:(2 0 1 |: (((, 1&-)@:[ ,"1 2 ]) (i.@:# ,:"0 1 ])@:((next transition ,~) non_terminal)))
       0.2 matrix 'HHT';'HTT'
    0.8 0.2   0   0   0   0
      0   0 0.2 0.8   0   0
      0   0 0.2   0 0.8   0
      0 0.2   0   0   0 0.8
      0   0   0   0   1   0
      0   0   0   0   0   1

       NB. 有了状态转移矩阵，就可以代入上面的公式得到结果了
       0.2 (-@:#@:] ([ }."0 1 }.) matrix) 'HHT';'HTT'
    0.8 0.2   0   0
      0   0 0.2 0.8
      0   0 0.2   0
      0 0.2   0   0
       0.2 (-@:#@:] ([ {."0 1 }.) matrix) 'HHT';'HTT'
      0   0
      0   0
    0.8   0
      0 0.8
       prob =: (-@:#@:] ([ ({."0 1 %. (=@i.@:# - ])@:(}."0 1)) }.) matrix)
       0.2 prob 'HHT';'HTT'
    0.238095    0.761905
    0.238095    0.761905
           1 4.45607e_18
    0.047619    0.952381
       ((] (+/ .*) ]) ^:_) 0.2 matrix 'HHT';'HTT'
    0 0 0 0 0.238095 0.761905
    0 0 0 0 0.238095 0.761905
    0 0 0 0        1        0
    0 0 0 0 0.047619 0.952381
    0 0 0 0        1        0
    0 0 0 0        0        1
       0.2 (]  (; & >) ({.@:prob)) 'HHT';'HTT'
    ┌───┬────────┐
    │HHT│0.238095│
    ├───┼────────┤
    │HTT│0.761905│
    └───┴────────┘
       NB. 所有定义的中间函数
       solve =: ] ;&> {.@:prob
       prob = -@:#@:] ([ ({."0 1 %. (=@i.@:# - ])@:(}."0 1)) }.) matrix
       matrix =: +/@:(mat&]"2)@:(2 0 1 |: (((, 1&-)@:[ ,"1 2 ]) (i.@:# ,:"0 1 ])@:((next transition ,~) non_terminal)))
       mat =: 3 : '({."1 y) (;/ }."1 y) } 0 $~ (],]) # y'
       transition =: (1 i:~ endswith&>)"0 1
       endswith =: ] -: ({.~ -@:#)
       next =: ('HT' ,~&.>"1 0 ]) , [ ,. [
       non_terminal =: [: (([:/:#&>){]) '' ; # }. ~.@:(, ;@:(<\&.>))
       table =: (' ';'H';'T') , ] ,. transition { ]
       transition_table =: (next table ,~) non_terminal
       NB. 合并到一起
       solve=:];&>{.@:(-@:#@:]([({."0 1%.(=@i.@:#-])@:(}."0 1))}.)+/@:(3 :'({."1 y)(;/}."1 y)}0$~(,])#y'&]"2)@:(2 0 1|:(((,1&-)@:[,"1 2])(i.@:#,:"0 1])@:(((('HT',~&.>"1 0]),[,.[)(1 i:~(]-:({.~-@:#))&>)"0 1,~)([:(([:/:#&>){])'';#}.~.@:(,;@:(<\&.>)))))))
       NB. J语言还支持分数的形式
       1r2 solve 'HHT';'HTT'
    ┌───┬───┐
    │HHT│2r3│
    ├───┼───┤
    │HTT│1r3│
    └───┴───┘
